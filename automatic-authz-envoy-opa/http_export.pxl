#px:set max_output_rows_per_table=1500

import px

def remove_ns_prefix(column):
    return px.replace('[a-z0-9\-]*/', column, '')

def add_source_dest_columns(df):
    df.pod = df.ctx['pod']
    df.node = df.ctx['node']
    df.container = df.ctx['container']
    df.deployment = df.ctx['deployment']

    # If remote_addr is a pod, get its name. If not, use IP address.
    df.ra_pod = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))
    df.ra_name = px.select(df.ra_pod != '', df.ra_pod, px.nslookup(df.remote_addr))
    df.ra_node = px.pod_id_to_node_name(px.ip_to_pod_id(df.remote_addr))
    df.ra_deployment = px.pod_id_to_deployment_name(px.ip_to_pod_id(df.remote_addr))

    df.is_server_tracing = df.trace_role == 2
    # Set client and server based on trace_role.
    df.source_pod = px.select(df.is_server_tracing, df.ra_name, df.pod)
    df.destination_pod = px.select(df.is_server_tracing, df.pod, df.ra_name)
    df.destination_node = px.select(df.is_server_tracing, df.node, df.ra_node)
    df.destination_deployment = px.select(df.is_server_tracing, df.deployment, df.ra_deployment)

    df.source_service = px.pod_name_to_service_name(df.source_pod)
    df.destination_service = px.pod_name_to_service_name(df.destination_pod)

    df.destination_namespace = px.pod_name_to_namespace(df.destination_pod)
    df.source_namespace = px.pod_name_to_namespace(df.source_pod)
    df.source_node = px.pod_id_to_node_name(px.pod_name_to_pod_id(df.source_pod))
    df.source_deployment = px.pod_name_to_deployment_name(df.source_pod)
    df.source_deployment = remove_ns_prefix(df.source_deployment)
    df.source_service = remove_ns_prefix(df.source_service)
    df.destination_service = remove_ns_prefix(df.destination_service)
    df.source_container = px.select(df.is_server_tracing, '', df.container)
    df.source_pod = remove_ns_prefix(df.source_pod)
    df.destination_pod = remove_ns_prefix(df.destination_pod)
    return df

df = px.DataFrame('http_events', start_time='-5m')
df = add_source_dest_columns(df)

df = df.head(15000)
df.start_time = df.time_ - df.latency
df.host = px.pluck(df.req_headers, 'Host')
df.req_url = df.host + df.req_path
df.user_agent = px.pluck(df.req_headers, 'User-Agent')
df.trace_id = px.pluck(df.req_headers, 'X-B3-TraceId')
df.span_id = px.pluck(df.req_headers, 'X-B3-SpanId')
df.parent_span_id = px.pluck(df.req_headers, 'X-B3-ParentSpanId')

# Pull out the SPIFFE service information from the x-forwarded-client-cert header
df.xfcc = px.pluck(df.req_headers, 'x-forwarded-client-cert')
df.xfcc_parts = px.split(df.xfcc, ";")
df.xfcc_by = px.pluck_array(df.xfcc_parts, 0)
df.xfcc_uri = px.pluck_array(df.xfcc_parts, 2)

df = df[df.xfcc != '']
df = df.drop(['xfcc', 'xfcc_parts'])

# Verify that the Pod name matches the XFCC By value. The
# XFCC header will be used to determine the destination service.
# In order to trust it, this verifies it matches the pod name seen
# from Kubernetes.
df = df[px.contains(df.xfcc_by, df.destination_deployment)]

# Strip out all but the actual path value from req_path
df.req_path = px.uri_recompose('', '', '', 0, px.pluck(px.uri_parse(df.req_path), 'path'), '', '')

# Replace any Hex IDS from the path with <id>
df.req_path = px.replace('/[a-fA-F0-9\-:]{6,}(/?)', df.req_path, '/<id>\\1')

df.cluster_name = px.vizier_name()
df.cluster_id = px.vizier_id()
df.pixie = 'pixie'

px.export(
df, px.otel.Data(
    endpoint=px.otel.Endpoint(
      url='otel-collector.default.svc.cluster.local:4317',
      insecure=True,
    ),
    resource={
    'service.name': df.destination_service,
    'server.k8s.pod.name': df.destination_pod,
    'server.k8s.deployment.name': df.destination_deployment,
    'server.k8s.namespace.name': df.destination_namespace,
    'server.k8s.node.name': df.destination_node,
    'http.xfcc_by': df.xfcc_by,
    'px.cluster.id': df.cluster_id,
    'k8s.cluster.name': df.cluster_name,
    'instrumentation.provider': df.pixie,
    },
    data=[
    px.otel.trace.Span(
        name=df.req_path,
        start_time=df.start_time,
        end_time=df.time_,
        trace_id=df.trace_id,
        span_id=df.span_id,
        parent_span_id=df.parent_span_id,
        kind=px.otel.trace.SPAN_KIND_SERVER,
        attributes={
        'client.service.name': df.source_service,
        'client.k8s.pod.name': df.source_pod,
        'client.k8s.deployment.name': df.source_deployment,
        'client.k8s.namespace.name': df.source_namespace,
        'client.k8s.node.name': df.source_node,
        'http.xfcc_uri': df.xfcc_uri,
        'http.method': df.req_method,
        'http.url': df.req_url,
        'http.target': df.req_path,
        'http.host': df.host,
        'http.status_code': df.resp_status,
        },
    ),
    ],
),
)
