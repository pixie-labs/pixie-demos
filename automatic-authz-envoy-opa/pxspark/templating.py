from jinja2 import Template

# Convert the Row structure into a dictionary suitable for templating
def convert_row_to_dict(row):
    service_name = row.service_name
    valid_sources = {}
    
    for client_map in row.client_http_target_method_map:
        for client, targets in client_map.items():
            valid_sources[client] = [{'method': target.http_method, 'prefix': target.http_target} for target in targets]
    
    return service_name, valid_sources

# Use the provided Jinja templates
main_template = """
package envoy.authz

import rego.v1

{# AUTOGENERATED: imports are added for each destination service #}
{%- for service in services %}
import data.px.service.{{ service }}
{%- endfor %}
{# END AUTOGENERATED #}

authz_by_service := {
    {%- for service in services %}
        "{{ service }}": data.px.service.{{ service }}.valid_sources{%- if not loop.last %},{% endif %}
    {%- endfor %}
}

default allow := false

dest_source_spiffe_ids := dest_source_spiffe_svc if {
    [by, _, uri_type_san] := split(input.attributes.request.http.headers["x-forwarded-client-cert"], ";")
    [_, source_spiffe_id] := split(uri_type_san, "=")
    source_spiffe_parts := split(source_spiffe_id, "/")
    source_spiffe_svc := source_spiffe_parts[count(source_spiffe_parts) - 1]

    [_, dest_spiffe_id] := split(by, "=")
    dest_spiffe_parts := split(dest_spiffe_id, "/")
    dest_spiffe_svc := dest_spiffe_parts[count(dest_spiffe_parts) - 1]

    dest_source_spiffe_svc := [dest_spiffe_svc, source_spiffe_svc]
}

check_l7_access(allowed_access, path, method) if {
    some path_method_pair in allowed_access
    path_method_pair.method == method
    startswith(path, path_method_pair.prefix)
}

dest_svc := dest_source_spiffe_ids[0]

source_svc := dest_source_spiffe_ids[1]

allowed_sources := object.get(authz_by_service, dest_svc, {})

path := input.attributes.request.http.path

method := input.attributes.request.http.method

allow if {
    some dest, sources in authz_by_service
    dest == dest_svc

    some src, _ in sources
    src == source_svc
    check_l7_access(object.get(allowed_sources, source_svc, {}), path, method)
}
"""

import_template = """
package px.service.{{ service_name }}

valid_sources := {
  {%- for source, paths in valid_sources.items() %}
  "{{ source }}": [
    {%- for path in paths %}
    {
      "method": "{{ path.method }}",
      "prefix": "{{ path.prefix }}",
    }{%- if not loop.last %},{% endif %}
    {%- endfor %}
  ]{%- if not loop.last %},{% endif %}
  {%- endfor %}
}
"""

# Function to render main template
def render_main_template(services):
    template = Template(main_template)
    return template.render(services=services)

# Function to render import template for each service
def render_import_template(service_name, valid_sources):
    template = Template(import_template)
    return template.render(service_name=service_name, valid_sources=valid_sources)
